#!/usr/bin/env bash

commit_msg="${1}"
commit_msg_lines=()
error_msg="[COMMIT FAILED]"
allowed_subject_verbs=('Add' 'Create' 'Update' 'Change' 'Fix' 'Refactor' 'Clean up' 'Remove' 'Delete')

# Splits the commit msg into separate lines and adds them to an array
split_commit_msg() {
    while IFS= read -r line; do

        # Trim trailing spaces from lines
        shopt -s extglob
        line="${line%%*( )}"
        shopt -u extglob

        # Ignore comments (lines starting with #)
        if [[ ! "${line}" =~ ^# ]]; then
            commit_msg_lines+=("${line}")
        fi

    done < <(cat ${commit_msg})
}

# Validates the commit msg
validate_commit_msg() {
    split_commit_msg

    # Store the subject
    local subject="${commit_msg_lines[0]}"

    # Stop validation if the message is empty or no subject is set
    if [[ -z "${commit_msg_lines[*]}" ]] || [[ -z "${subject}" ]]; then
        exit 0
    fi

    # Check if the subject has leading whitespace(s)
    if [[ "${subject}" =~ ^[[:space:]]+ ]]; then
        echo "${error_msg} The subject can not have leading whitespace"
        exit 1;
    fi

    # Check if the subject contains more than 1 word
    if [[ $(echo "${subject}" | wc -w) -eq 1 ]]; then
        echo "${error_msg} The subject has to contain more than 1 word"
        exit 1
    fi

    # Check if the subject is separated from the body with a blank line
    if [[ ${#commit_msg_lines[@]} -gt 1 ]] && [[ -n "${commit_msg_lines[1]}" ]]; then
        echo "${error_msg} Separate subject from body with a blank line"
        exit 1
    fi

    # Check if the subject line is limited to 50 characters
    if [[ "${#subject}" -gt 50 ]]; then
        echo "${error_msg} Limit the subject line to 50 characters (${#commit_msg_lines[0]} characters used)"
        exit 1
    fi

    # Check if the subject line is capitalized
    if [[ ! "${subject}" =~ ^[A-Z] ]]; then
        echo "${error_msg} Capitalize the subject line"
        exit 1
    fi

    # Check if the subject line does not end with a period
    if [[ ! "${subject}" =~ [^\.]$ ]]; then
        echo "${error_msg} Do not end the subject line with a period"
        exit 1
    fi

    # Check if the subject starts with one of the allowed verbs
    local first_word=$(echo "${subject}" | awk '{print $1;}')
    local is_allowed=false

    for verb in "${allowed_subject_verbs[@]}"; do
        if [[ "${verb}" == "${first_word}" ]]; then
            is_allowed=true
        fi
    done

    if [[ "${is_allowed}" == false ]]; then
        echo "${error_msg} Use the imperative mood in the subject line"
        echo "Your subject has to start with one of the following verbs:"
        printf -- '    - %s\n' "${allowed_subject_verbs[@]}"
        exit 1
    fi

    # Check if the body is wrapped at 72 characters (except for url's)
    for line in "${commit_msg_lines[@]}"; do
        if [[ "${line}" =~ ^[[:space:]]*(https?|ftp|file):\/\/[-A-Za-z0-9\+\&\@\#\/\%\?\=\~\_\|\!\:\,\.\;]*[-A-Za-z0-9\+\&\@\#\/\%\=\~\_\|] ]]; then
            continue
        elif [[ "${#line}" -gt 72 ]]; then
            echo "${error_msg} Wrap the body at 72 characters (${#line} characters used)"
            exit 1
        fi
    done
}

validate_commit_msg

# Append the branch name to the commit message
branch="$(git symbolic-ref --short HEAD)"
if [[ -z "${branch}" ]]; then
    echo "${error_msg} Could not determine the branch name"
    exit 1
fi

echo "[branch: ${branch}]" >> "${1}"